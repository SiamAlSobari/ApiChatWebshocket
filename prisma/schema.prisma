// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  hashed_password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile?
  sendedMessages Message[] @relation("MessageSender")
  chatRooms ChatRoomMember[]
  contactsOf  Contact[] @relation("ContactUser")
  contacts   Contact[]
} 


model Profile {
  id        String   @id @default(uuid())
  user_id    String   @unique
  full_name  String
  image_url  String  @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKEZNXv6LHND3dCKSERhpqQUHVn0QhNomyMw&s")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [user_id], references: [id])
}


model Contact {
  id  String  @id @default(uuid())
  user_id String
  contact_name String
  contact_id String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [user_id], references: [id])
  contact  User     @relation("ContactUser", fields: [contact_id], references: [id])
}

enum ChatType {
  PRIVATE
  GROUP
}

model ChatRoom {
  id  String  @id @default(uuid())
  type ChatType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  members  ChatRoomMember[]
}

model ChatRoomMember {
  id  String  @id @default(uuid())
  chat_room_id String
  user_id String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatRoom ChatRoom @relation(fields: [chat_room_id], references: [id])
  user     User     @relation(fields: [user_id], references: [id])

  @@index([chat_room_id])
  @@index([user_id])
}

model Grup {
  id  String  @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Message {
  id  String  @id @default(uuid())
  chat_room_id String
  sender_id String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatRoom ChatRoom @relation(fields: [chat_room_id], references: [id])
  sender   User     @relation("MessageSender",fields: [sender_id], references: [id])

  @@index([chat_room_id])
  @@index([sender_id])
}